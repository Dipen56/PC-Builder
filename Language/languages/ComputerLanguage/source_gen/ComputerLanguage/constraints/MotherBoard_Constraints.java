package ComputerLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeParent;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodePointer;

public class MotherBoard_Constraints extends BaseConstraintsDescriptor {
  public MotherBoard_Constraints() {
    super(MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, "ComputerLanguage.structure.MotherBoard"));
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeParent, Boolean> calculateCanBeParentConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeParent, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeParent context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAParent(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "motherBoardName";
        {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), (SPropertyOperations.getString(propertyValue)));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09bL, "chipset"), "Intel Z270");
          String pin = "4-pin";
          if ((SPropertyOperations.getString(propertyValue)).equals("Gigabyte Aorus Z270X-Gaming")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "8 " + pin);
          } else if ((SPropertyOperations.getString(propertyValue)).equals("ASRock Z270 Killer SLI/ac")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "4 " + pin);
          } else if ((SPropertyOperations.getString(propertyValue)).equals("ASUS RoG Maximus IX Hero")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "8 " + pin);
          } else if ((SPropertyOperations.getString(propertyValue)).equals("Biostar Racing")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "5 " + pin);
          } else if ((SPropertyOperations.getString(propertyValue)).equals("MSI Z270 SLI Plus")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "6 " + pin);
          } else if ((SPropertyOperations.getString(propertyValue)).equals("ASRock Z270 Gaming-ITX/ac")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "3 " + pin);
          } else if ((SPropertyOperations.getString(propertyValue)).equals("ECS Z270H4-I")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "2 " + pin);
          }
          if ((SPropertyOperations.getString(propertyValue)).equals("Gigabyte Aorus Z270X-Gaming")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1");
          } else if ((SPropertyOperations.getString(propertyValue)).equals("ASRock Z270 Gaming-ITX/ac") || SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("ECS Z270H4-I")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "6");
          } else {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "2");
          }
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09bL, "chipset"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09bL), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "chipset";
        SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09bL, "chipset"), "Intel Z270");
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "cooling";
        {
          String pin = "4-pin";
          if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("Gigabyte Aorus Z270X-Gaming")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "8 " + pin);
          } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("ASRock Z270 Killer SLI/ac")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "4 " + pin);
          } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("ASUS RoG Maximus IX Hero")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "8 " + pin);
          } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("Biostar Racing")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "5 " + pin);
          } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("MSI Z270 SLI Plus")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "6 " + pin);
          } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("ASRock Z270 Gaming-ITX/ac")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "3 " + pin);
          } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("ECS Z270H4-I")) {
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f09eL, "cooling"), "2 " + pin);
          }
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "formFactor";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("Gigabyte Aorus Z270X-Gaming")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("ASRock Z270 Gaming-ITX/ac") || SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x1cca5a48a9c8cf39L, "motherBoardName"), "Gigabyte Aorus Z270X-Gaming").equals("ECS Z270H4-I")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "6");
        } else {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "2");
        }
      }
    });
    return properties;
  }
  private static boolean staticCanBeAParent(SNode node, SNode childNode, SAbstractConcept childConcept, SContainmentLink link) {
    int gpuCount = 0;
    int ramCount = 0;
    int storageDriveCount = 0;
    for (SNode c : ListSequence.fromList(SNodeOperations.getChildren(node))) {
      if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd6c1ed4L, "ComputerLanguage.structure.GPUWrapper"))) {
        SNode gpu = ((SNode) (c));
        gpuCount = SLinkOperations.getChildren(gpu, MetaAdapterFactory.getContainmentLink(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd6c1ed4L, 0x853c707cd6c1ef0L, "gpu")).size();
      }
      if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x9d797225990c617L, "ComputerLanguage.structure.RAMWrapper"))) {
        SNode ram = ((SNode) (c));
        ramCount = SLinkOperations.getChildren(ram, MetaAdapterFactory.getContainmentLink(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x9d797225990c617L, 0x9d797225990c633L, "ram")).size();
      }
      if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd6c1d59L, "ComputerLanguage.structure.HDDWrapper"))) {
        SNode hdd = ((SNode) (c));
        for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(hdd, MetaAdapterFactory.getContainmentLink(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd6c1d59L, 0x853c707cd6c1d75L, "hdd")))) {
          storageDriveCount++;
        }
      }
      if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd67310eL, "ComputerLanguage.structure.SSDWrapper"))) {
        SNode ssd = ((SNode) (c));
        for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(ssd, MetaAdapterFactory.getContainmentLink(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd67310eL, 0x853c707cd67312aL, "ssd")))) {
          storageDriveCount++;
        }
      }
    }
    if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("1")) {
      if (gpuCount > 4) {
        return false;
      } else if (ramCount > 4) {
        return false;
      } else if (storageDriveCount > 6) {
        return false;
      }
    } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("3")) {
      if (gpuCount > 2) {
        return false;
      } else if (ramCount > 2) {
        return false;
      } else if (storageDriveCount > 3) {
        return false;
      }
    } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("4") || SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("5") || SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("6")) {
      if (gpuCount > 1) {
        return false;
      } else if (ramCount > 2) {
        return false;
      } else if (storageDriveCount > 2) {
        return false;
      }
    } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("2")) {
      if (gpuCount > 4) {
        return false;
      } else if (ramCount > 8) {
        return false;
      } else if (storageDriveCount > 6) {
        return false;
      }
    }
    return true;
  }
  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:f9514403-e950-4644-b208-13266bac00e8(ComputerLanguage.constraints)", "3458051268967456304");
}
