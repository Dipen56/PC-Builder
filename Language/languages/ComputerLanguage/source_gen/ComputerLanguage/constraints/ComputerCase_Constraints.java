package ComputerLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeParent;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;

public class ComputerCase_Constraints extends BaseConstraintsDescriptor {
  public ComputerCase_Constraints() {
    super(MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, "ComputerLanguage.structure.ComputerCase"));
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected ConstraintFunction<ConstraintContext_CanBeParent, Boolean> calculateCanBeParentConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeParent, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeParent context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAParent(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x536ac53f1f57368eL, "weight"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x536ac53f1f57368eL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "weight";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x55289da3a626f093L, "typeOfChassis"), "Midi Tower").equals("Midi Tower")) {
          return (SPropertyOperations.getInteger(propertyValue)) <= 5 && (SPropertyOperations.getInteger(propertyValue)) >= 2;
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x55289da3a626f093L, "typeOfChassis"), "Midi Tower").equals("Mini Tower")) {
          return (SPropertyOperations.getInteger(propertyValue)) <= 4 && (SPropertyOperations.getInteger(propertyValue)) >= 0;
        }
        return (SPropertyOperations.getInteger(propertyValue)) <= 6 && (SPropertyOperations.getInteger(propertyValue)) >= 2;
      }
    });
    return properties;
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(parentNode))) {
      if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, "ComputerLanguage.structure.ComputerCase"))) {
        SNode compCase = ((SNode) (child));
        for (SNode c : ListSequence.fromList(SNodeOperations.getChildren(parentNode))) {
          if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, "ComputerLanguage.structure.MotherBoard"))) {
            SNode mb = ((SNode) (c));
            if (SPropertyOperations.getString_def(compCase, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x55289da3a626f093L, "typeOfChassis"), "Midi Tower").equals("Mini Tower")) {
              if (SPropertyOperations.getString_def(mb, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("6")) {
                return true;
              }
            } else if (SPropertyOperations.getString_def(compCase, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x55289da3a626f093L, "typeOfChassis"), "Midi Tower").equals("Midi Tower")) {
              if (SPropertyOperations.getString_def(mb, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("3") || SPropertyOperations.getString_def(mb, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626f077L, 0x55289da3a626f165L, "formFactor"), "1").equals("6")) {
                return true;
              }
            } else {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
  private static boolean staticCanBeAParent(SNode node, SNode childNode, SAbstractConcept childConcept, SContainmentLink link) {
    int count = 0;
    for (SNode c : ListSequence.fromList(SNodeOperations.getChildren(node))) {
      if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0xbc500a6864c3a83L, "ComputerLanguage.structure.PCCooling"))) {
        count++;
      }
    }
    if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x55289da3a626f093L, "typeOfChassis"), "Midi Tower").equals("Mini Tower")) {
      if (count > 1) {
        return false;
      }
    } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x55289da3a626f093L, "typeOfChassis"), "Midi Tower").equals("Midi Tower")) {
      if (count > 2) {
        return false;
      }
    } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x55289da3a626ef92L, 0x55289da3a626f093L, "typeOfChassis"), "Midi Tower").equals("Full Tower")) {
      if (count > 4) {
        return false;
      }
    }
    return true;
  }
  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:f9514403-e950-4644-b208-13266bac00e8(ComputerLanguage.constraints)", "493471141054556649");
  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:f9514403-e950-4644-b208-13266bac00e8(ComputerLanguage.constraints)", "3458051268967272538");
}
