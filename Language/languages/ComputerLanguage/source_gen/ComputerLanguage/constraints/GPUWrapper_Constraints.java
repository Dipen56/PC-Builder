package ComputerLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class GPUWrapper_Constraints extends BaseConstraintsDescriptor {
  public GPUWrapper_Constraints() {
    super(MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd6c1ed4L, "ComputerLanguage.structure.GPUWrapper"));
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    SNode[] gpus = new SNode[6];
    int index = 0;
    for (SNode c : ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x853c707cd6c1ed4L, 0x853c707cd6c1ef0L, "gpu")))) {
      gpus[index] = c;
      index++;
    }

    for (int i = 0; i < index; i++) {
      if (!(SPropertyOperations.getString_def(gpus[0], MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858269L, 0x7c6dc1906f8efeaeL, "gpuName"), "EVGA GeForce GTX 1080").equals(SPropertyOperations.getString_def(gpus[i], MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858269L, 0x7c6dc1906f8efeaeL, "gpuName"), "EVGA GeForce GTX 1080")))) {
        return false;
      }
    }

    return true;
  }
  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:f9514403-e950-4644-b208-13266bac00e8(ComputerLanguage.constraints)", "493471141048776288");
}
