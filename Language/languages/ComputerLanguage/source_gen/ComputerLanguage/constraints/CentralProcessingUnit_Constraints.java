package ComputerLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class CentralProcessingUnit_Constraints extends BaseConstraintsDescriptor {
  public CentralProcessingUnit_Constraints() {
    super(MetaAdapterFactory.getConcept(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, "ComputerLanguage.structure.CentralProcessingUnit"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "cpuName";
        SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), (SPropertyOperations.getString(propertyValue)));
        if ((SPropertyOperations.getString(propertyValue)).equals("AMD Ryzen 3 1300X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (4));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.5");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (4));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "8MB");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "65W");
        } else if ((SPropertyOperations.getString(propertyValue)).equals("AMD Ryzen 5 1600X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (6));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.6");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (12));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "16MB");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "95W");
        } else if ((SPropertyOperations.getString(propertyValue)).equals("AMD Ryzen Threadripper 1950X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (16));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.4");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (32));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "32MB");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "180W");
        } else if ((SPropertyOperations.getString(propertyValue)).equals("Intel Core i5-7600K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (4));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.8");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (4));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "6MB");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "91W");
        } else if ((SPropertyOperations.getString(propertyValue)).equals("Intel Core i7-7700K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (4));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "4.2");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (8));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "8MB");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "91W");
        } else if ((SPropertyOperations.getString(propertyValue)).equals("Intel Pentium G4560")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (2));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.5");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (4));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "3MB");
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "54W");
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "cores";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 3 1300X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (4));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 5 1600X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (6));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen Threadripper 1950X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (16));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i5-7600K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (4));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i7-7700K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (4));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Pentium G4560")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858274L, "cores"), "" + (2));
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "clockSpeedGHz";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 3 1300X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.5");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 5 1600X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.6");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen Threadripper 1950X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.4");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i5-7600K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.8");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i7-7700K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "4.2");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Pentium G4560")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858276L, "clockSpeedGHz"), "3.5");
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "thread";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 3 1300X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (4));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 5 1600X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (12));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen Threadripper 1950X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (32));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i5-7600K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (4));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i7-7700K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (8));
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Pentium G4560")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858279L, "thread"), "" + (4));
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "Cache";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 3 1300X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "8MB");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 5 1600X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "16MB");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen Threadripper 1950X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "32MB");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i5-7600K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "6MB");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i7-7700K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "8MB");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Pentium G4560")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef85827dL, "Cache"), "3MB");
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "TDP";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 3 1300X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "65W");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen 5 1600X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "95W");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("AMD Ryzen Threadripper 1950X")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "180W");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i5-7600K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "91W");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Core i7-7700K")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "91W");
        } else if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x1cca5a48a9d0cafbL, "cpuName"), "Intel Core i7-7700K").equals("Intel Pentium G4560")) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf4582f1691744942L, 0x8b09d4f72a7da258L, 0x58d6939bef858273L, 0x58d6939bef858282L, "TDP"), "54W");
        }
      }
    });
    return properties;
  }
}
