package ComputerLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_CentralProcessingUnit;
  private ConceptPresentation props_Component;
  private ConceptPresentation props_ComputerCase;
  private ConceptPresentation props_GPUWrapper;
  private ConceptPresentation props_GamesList;
  private ConceptPresentation props_GraphicsCard;
  private ConceptPresentation props_HDDWrapper;
  private ConceptPresentation props_HardDrive;
  private ConceptPresentation props_MotherBoard;
  private ConceptPresentation props_PC;
  private ConceptPresentation props_PCCooling;
  private ConceptPresentation props_PowerSupply;
  private ConceptPresentation props_RAMWrapper;
  private ConceptPresentation props_RandomAccessMemory;
  private ConceptPresentation props_SSDWrapper;
  private ConceptPresentation props_SolidStateDrive;
  private ConceptPresentation props_User;
  private ConceptPresentation props_WirelessNetworkAdapter;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CentralProcessingUnit:
        if (props_CentralProcessingUnit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CentralProcessingUnit = cpb.create();
        }
        return props_CentralProcessingUnit;
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("contains all the parts of the PC");
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.ComputerCase:
        if (props_ComputerCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The cases is a component of PC");
          cpb.presentationByName();
          props_ComputerCase = cpb.create();
        }
        return props_ComputerCase;
      case LanguageConceptSwitch.GPUWrapper:
        if (props_GPUWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GPUWrapper");
          props_GPUWrapper = cpb.create();
        }
        return props_GPUWrapper;
      case LanguageConceptSwitch.GamesList:
        if (props_GamesList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GamesList");
          props_GamesList = cpb.create();
        }
        return props_GamesList;
      case LanguageConceptSwitch.GraphicsCard:
        if (props_GraphicsCard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GraphicsCard = cpb.create();
        }
        return props_GraphicsCard;
      case LanguageConceptSwitch.HDDWrapper:
        if (props_HDDWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HDDWrapper");
          props_HDDWrapper = cpb.create();
        }
        return props_HDDWrapper;
      case LanguageConceptSwitch.HardDrive:
        if (props_HardDrive == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_HardDrive = cpb.create();
        }
        return props_HardDrive;
      case LanguageConceptSwitch.MotherBoard:
        if (props_MotherBoard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Mother board and it holds it type");
          cpb.presentationByName();
          props_MotherBoard = cpb.create();
        }
        return props_MotherBoard;
      case LanguageConceptSwitch.PC:
        if (props_PC == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("PC contains [0..n] components");
          cpb.presentationByName();
          props_PC = cpb.create();
        }
        return props_PC;
      case LanguageConceptSwitch.PCCooling:
        if (props_PCCooling == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PCCooling = cpb.create();
        }
        return props_PCCooling;
      case LanguageConceptSwitch.PowerSupply:
        if (props_PowerSupply == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("amount of max power availble to PC");
          cpb.presentationByName();
          props_PowerSupply = cpb.create();
        }
        return props_PowerSupply;
      case LanguageConceptSwitch.RAMWrapper:
        if (props_RAMWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RAMWrapper");
          props_RAMWrapper = cpb.create();
        }
        return props_RAMWrapper;
      case LanguageConceptSwitch.RandomAccessMemory:
        if (props_RandomAccessMemory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RandomAccessMemory = cpb.create();
        }
        return props_RandomAccessMemory;
      case LanguageConceptSwitch.SSDWrapper:
        if (props_SSDWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SSDWrapper");
          props_SSDWrapper = cpb.create();
        }
        return props_SSDWrapper;
      case LanguageConceptSwitch.SolidStateDrive:
        if (props_SolidStateDrive == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SolidStateDrive = cpb.create();
        }
        return props_SolidStateDrive;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("User");
          props_User = cpb.create();
        }
        return props_User;
      case LanguageConceptSwitch.WirelessNetworkAdapter:
        if (props_WirelessNetworkAdapter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WirelessNetworkAdapter = cpb.create();
        }
        return props_WirelessNetworkAdapter;
    }
    return null;
  }
}
