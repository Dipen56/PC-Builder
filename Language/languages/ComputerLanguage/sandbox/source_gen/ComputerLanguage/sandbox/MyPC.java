package ComputerLanguage.sandbox;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Font;
import java.awt.Dimension;

public class MyPC extends JFrame {
  public static final int size = 800;
  public static int width = 700;
  public static int height = 120;
  public static int x = 50;
  public static int y = 10;
  public static int stringY = y + (height) + 25;
  public static int bigRectHeight = size - height * 2 - 10;
  public static int bigRectWidth = width;
  public static int bigRectY = y + stringY + 30;
  public static int bigRectX = x;

  public static int WINDOW_WIDTH = JFrame.WIDTH;
  public static int WINDOW_HEIGHT = JFrame.HEIGHT;

  public static final int box_height = 150;
  public static final int box_width = width / 2 - 15;
  public static final int spacing = 10;
  public static final int textSize = 20;

  /**
   * 
   */
  private JPanel panel = new JPanel() {


    @Override
    protected void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);
      String totalCost = "1400.0";
      String name = "MyPC";
      String mbRank = "1";
      String cpuPerformance = "95";
      String hddPerformance = "79";
      String ssdPerformance = "72";
      String ramPerformance = "75";
      String gpuPerformance = "100";

      String current_game = "Battlefield 1";
      String cpuRequirement = "81";
      String gpuRequirement = "35";
      String ramRequirement = "75";
      String diskRequirement = "50GB";

      int mySize = size;
      // This is where the user information is going to be displyed 
      graphics.setColor(Color.white);
      graphics.fillRect(x, y + textSize, width, height + 5);
      graphics.setColor(Color.black);
      graphics.drawRect(x, y + textSize, width, height + 5);

      setTextStyle(Font.BOLD, 24, graphics);
      String userInfo = "PC Information";
      graphics.drawString(userInfo, x + ((mySize - x * 2) / 2) - userInfo.length() * 4, y + 10);

      setTextStyle(Font.BOLD, 18, graphics);

      String budget = "2000";
      graphics.drawString("Your Budget: $" + budget, x + 5, y + textSize * 2);
      String cost = "Total Cost: $" + totalCost;

      double budgetCost = Double.parseDouble(budget);
      double doubleCost = Double.parseDouble(totalCost);
      if ((budgetCost - doubleCost) < 0) {
        graphics.setColor(Color.RED);
        graphics.drawString(cost, x + 5, y + textSize * 3);
      } else {
        graphics.setColor(Color.GREEN);
        graphics.drawString(cost, x + 5, y + textSize * 3);
      }
      graphics.setColor(Color.BLACK);

      Double averagePerformance = (Double.parseDouble(cpuPerformance) + Double.parseDouble(hddPerformance) + Double.parseDouble(ssdPerformance) + Double.parseDouble(ramPerformance) + Double.parseDouble(gpuPerformance) + Double.parseDouble(mbRank)) / 6;

      graphics.drawString("Rank Performance: " + convertInt(averagePerformance.toString()), x + 5, y + textSize * 4);
      setTextStyle(Font.PLAIN, 15, graphics);
      graphics.drawString("Motherboard Rank: " + mbRank, x + width / 2 - 100, y + textSize * 2);
      graphics.drawString("CPU Performance: " + cpuPerformance + "%", x + width / 2 - 100, y + textSize * 3);
      graphics.drawString("HDD Performance: " + hddPerformance + "%", x + width / 2 - 100, y + textSize * 4);
      graphics.drawString("SSD Performance: " + ssdPerformance + "%", x + width / 2 - 100, y + textSize * 5);
      graphics.drawString("RAM Performance: " + ramPerformance + "%", x + width / 2 - 100, y + textSize * 6);
      graphics.drawString("GPU Performance: " + gpuPerformance + "%", x + width / 2 - 100, y + textSize * 7);

      // this is where the game performance information will be displayed. 
      graphics.drawString("Requirements Calculator: ", ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 2);
      setTextStyle(Font.PLAIN, 12, graphics);

      Double cpuGameCalc = (Double.parseDouble(cpuRequirement) / Double.parseDouble(cpuPerformance)) * 100;
      String cpuGame = convertInt(cpuGameCalc.toString());
      Double gpuGameCalc = Double.parseDouble(gpuRequirement) / Double.parseDouble(gpuPerformance) * 100;
      String gpuGame = convertInt(gpuGameCalc.toString());
      Double ramGameCalc = Double.parseDouble(ramRequirement) / Double.parseDouble(ramPerformance) * 100;
      String ramGame = convertInt(ramGameCalc.toString());

      graphics.drawString("Game: " + current_game, ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 3);
      if (Double.parseDouble(cpuPerformance) < cpuGameCalc) {
        graphics.setColor(Color.RED);
        graphics.drawString("CPU:  " + cpuGame + "%", ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 4);
      } else {
        graphics.setColor(Color.GREEN);
        graphics.drawString("CPU:  " + cpuGame + "%", ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 4);
      }
      if (Double.parseDouble(gpuPerformance) < gpuGameCalc) {
        graphics.setColor(Color.RED);
        graphics.drawString("GPU:  " + gpuGame + "%", ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 5);
      } else {
        graphics.setColor(Color.GREEN);
        graphics.drawString("GPU:  " + gpuGame + "%", ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 5);
      }
      graphics.setColor(Color.BLACK);
      graphics.drawString("RAM:  " + ramGame + "%", ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 6);
      graphics.drawString("Disk Space: " + diskRequirement, ((int) Math.round(width / 1.25)) + x - 80, y + textSize * 7);

      //  this is where computer component informaion will be displayed 
      graphics.setColor(Color.black);
      graphics.fillRect(bigRectX, bigRectY, bigRectWidth, bigRectHeight);
      graphics.drawRect(bigRectX, bigRectY, bigRectWidth, bigRectHeight);

      // this will display the name of our sandbox  
      setTextStyle(Font.BOLD, 24, graphics);
      graphics.drawString(name, x + ((mySize - x * 2) / 2) - name.length() * 2, stringY + textSize + 10);


      {
        // firstly define the constant for the box for the Computer case 
        int size = MyPC.size;
        int caseWidth = MyPC.box_width;
        int caseHeight = MyPC.box_height;
        int caseX = MyPC.bigRectX + 10;
        int caseY = MyPC.bigRectY + 10;

        graphics.setColor(new Color(204, 255, 204));
        graphics.fillRect(caseX, caseY, caseWidth, caseHeight);
        graphics.setColor(Color.black);
        graphics.drawRect(caseX, caseY, caseWidth, caseHeight);

        MyPC.setTextStyle(Font.BOLD, 18, graphics);
        graphics.drawString("Computer Case: ", caseX + 5, caseY + MyPC.textSize);
        MyPC.setTextStyle(Font.BOLD, 15, graphics);
        graphics.drawString("Corsair", caseX + 5, caseY + MyPC.textSize * 2);
        MyPC.setTextStyle(Font.PLAIN, 15, graphics);
        graphics.drawString("Cost: " + "200", caseX + 5, caseY + MyPC.textSize * 3);


        // now, here is the drawing logic for the fans. 
        // fanX was originally 17 
        int fanX = caseX + MyPC.spacing;
        int fanY = caseY + caseHeight / 2;
        int fanWidth = caseWidth - MyPC.spacing * 2;
        int fanHeight = caseHeight / 2 - MyPC.spacing;

        graphics.setColor(new Color(111, 220, 220));
        graphics.fillRect(fanX, fanY, fanWidth, fanHeight);
        graphics.setColor(Color.black);
        graphics.drawRect(fanX, fanY, fanWidth, fanHeight);

        MyPC.setTextStyle(Font.BOLD, 15, graphics);
        graphics.drawString("Fans: ", fanX + 5, fanY + MyPC.textSize);
        MyPC.setTextStyle(Font.BOLD, 12, graphics);
        graphics.drawString("Number of Case Fans: 1 Cost: 200", fanX + 5, fanY + MyPC.textSize * 2);
      }
      {
        int height = MyPC.bigRectHeight - MyPC.box_height - MyPC.spacing * 3;
        int width = MyPC.box_width * 2 + MyPC.spacing;
        int x = MyPC.bigRectX + MyPC.spacing;
        int y = MyPC.bigRectY + MyPC.box_height + MyPC.spacing * 2;

        graphics.setColor(new Color(204, 255, 204));
        graphics.fillRect(x, y, width, height);
        graphics.setColor(Color.BLACK);
        graphics.drawRect(x, y, width, height);

        MyPC.setTextStyle(Font.BOLD, 18, graphics);
        graphics.drawString("Mother Board: " + "ASRock Z270 Gaming-ITX/ac", x + 5, y + MyPC.textSize);
        MyPC.setTextStyle(Font.PLAIN, 15, graphics);
        graphics.drawString("Cost: " + "200", x + 5, y + MyPC.textSize * 2);

        {
          int cpu_height = MyPC.box_height / 2 - MyPC.spacing / 2;
          int cpu_width = MyPC.box_width - MyPC.spacing;

          int cpu_x = MyPC.bigRectX + MyPC.spacing * 2;
          int cpu_y = MyPC.bigRectY + MyPC.spacing * 4 + cpu_height * 2 + MyPC.textSize * 2;
          graphics.setColor(Color.YELLOW);
          graphics.fillRect(cpu_x, cpu_y, cpu_width, cpu_height);
          graphics.setColor(Color.BLACK);
          graphics.drawRect(cpu_x, cpu_y, cpu_width, cpu_height);
          MyPC.setTextStyle(Font.BOLD, 15, graphics);
          graphics.drawString("CPU: ", cpu_x + 5, cpu_y + MyPC.textSize);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("Intel Core i5-7600K", cpu_x + 5, cpu_y + MyPC.textSize * 2);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("Cost: " + "200", cpu_x + 5, cpu_y + MyPC.textSize * 3);

        }
        {
          int gpu_height = MyPC.box_height;
          int gpu_width = MyPC.box_width - MyPC.spacing;

          int gpu_x = MyPC.bigRectX + MyPC.spacing * 3 + gpu_width;
          int gpu_y = MyPC.bigRectY + MyPC.spacing * 3 + gpu_height + MyPC.textSize * 2;

          graphics.setColor(new Color(204, 204, 204));
          graphics.fillRect(gpu_x, gpu_y, gpu_width, gpu_height);
          graphics.setColor(Color.BLACK);
          graphics.drawRect(gpu_x, gpu_y, gpu_width, gpu_height);

          MyPC.setTextStyle(Font.BOLD, 15, graphics);
          graphics.drawString("GPU(s): ", gpu_x + 5, gpu_y + MyPC.textSize);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          String nameList = "AMD Radeon RX Vega-";
          String[] nameArray = nameList.split("-");
          int i = 0;
          while (i < nameArray.length) {
            graphics.drawString(nameArray[i], gpu_x + 5, gpu_y + MyPC.textSize * 2 + (i * 15));
            i++;
          }

          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("Cost: " + "200", gpu_x + 5, gpu_y + gpu_height - MyPC.textSize);


        }
        {
          int ram_height = MyPC.box_height;
          int ram_width = MyPC.box_width - MyPC.spacing;

          int ram_x = MyPC.bigRectX + MyPC.spacing * 2;
          int ram_y = MyPC.bigRectY + MyPC.spacing * 2 + ram_height * 2 + MyPC.textSize * 3;
          graphics.setColor(new Color(102, 153, 255));
          graphics.fillRect(ram_x, ram_y, ram_width, ram_height);
          graphics.setColor(Color.BLACK);
          graphics.drawRect(ram_x, ram_y, ram_width, ram_height);

          MyPC.setTextStyle(Font.BOLD, 15, graphics);
          graphics.drawString("RAM(s): ", ram_x + 5, ram_y + MyPC.textSize);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          String nameList = "AData XPG-";
          String[] nameArray = nameList.split("-");
          int i = 0;
          while (i < nameArray.length) {
            graphics.drawString(nameArray[i], ram_x + 5, ram_y + MyPC.textSize * 2 + (i * 15));
            i++;
          }

          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("Cost: " + "200", ram_x + 5, ram_y + ram_height - MyPC.textSize);


        }
        {
          int wifi_height = MyPC.box_height / 2 - MyPC.spacing / 2;
          int wifi_width = MyPC.box_width - MyPC.spacing;

          int wifi_x = MyPC.bigRectX + MyPC.spacing * 2;
          int wifi_y = MyPC.bigRectY + MyPC.spacing * 3 + wifi_height * 3 + MyPC.textSize * 3;
          graphics.setColor(Color.ORANGE);
          graphics.fillRect(wifi_x, wifi_y, wifi_width, wifi_height);
          graphics.setColor(Color.BLACK);
          graphics.drawRect(wifi_x, wifi_y, wifi_width, wifi_height);

          MyPC.setTextStyle(Font.BOLD, 15, graphics);
          graphics.drawString("Wifi Adapter: ", wifi_x + 5, wifi_y + MyPC.textSize);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("ASUS PCE-AC55BT", wifi_x + 5, wifi_y + MyPC.textSize * 2);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("Cost: " + "200", wifi_x + 5, wifi_y + MyPC.textSize * 3);

        }
        {
          int hdd_height = MyPC.box_height;
          int hdd_width = MyPC.box_width / 2 - MyPC.spacing;

          int hdd_x = MyPC.bigRectX + MyPC.box_width + hdd_width + MyPC.spacing * 3;
          int hdd_y = MyPC.bigRectY + MyPC.spacing * 2 + hdd_height * 2 + MyPC.textSize * 3;

          graphics.setColor(new Color(255, 179, 179));
          graphics.fillRect(hdd_x, hdd_y, hdd_width, hdd_height);
          graphics.setColor(Color.black);
          graphics.drawRect(hdd_x, hdd_y, hdd_width, hdd_height);

          MyPC.setTextStyle(Font.BOLD, 15, graphics);
          graphics.drawString("HDD(s): ", hdd_x + 5, hdd_y + MyPC.textSize);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          String nameList = "WD Blue-";
          String[] nameArray = nameList.split("-");
          int i = 0;
          while (i < nameArray.length) {
            graphics.drawString(nameArray[i], hdd_x + 5, hdd_y + MyPC.textSize * 2 + (i * 15));
            i++;
          }

          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("Cost: " + "200", hdd_x + 5, hdd_y + hdd_height - MyPC.textSize);
        }
        {
          int ssd_height = MyPC.box_height;
          int ssd_width = MyPC.box_width / 2 - MyPC.spacing;

          int ssd_x = MyPC.bigRectX + MyPC.box_width + MyPC.spacing * 2;
          int ssd_y = MyPC.bigRectY + MyPC.spacing * 2 + ssd_height * 2 + MyPC.textSize * 3;

          graphics.setColor(new Color(204, 204, 255));
          graphics.fillRect(ssd_x, ssd_y, ssd_width, ssd_height);
          graphics.setColor(Color.black);
          graphics.drawRect(ssd_x, ssd_y, ssd_width, ssd_height);

          MyPC.setTextStyle(Font.BOLD, 15, graphics);
          graphics.drawString("SSD(s): ", ssd_x + 5, ssd_y + MyPC.textSize);
          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          String nameList = "Apacer Armor AS681-";
          String[] nameArray = nameList.split("-");
          int i = 0;
          while (i < nameArray.length) {
            graphics.drawString(nameArray[i], ssd_x + 5, ssd_y + MyPC.textSize * 2 + (i * 15));
            i++;
          }

          MyPC.setTextStyle(Font.BOLD, 12, graphics);
          graphics.drawString("Cost: " + "200", ssd_x + 5, ssd_y + ssd_height - MyPC.textSize);
        }
      }
      {
        int size = MyPC.size;
        int height = MyPC.box_height;
        int width = MyPC.box_width;
        int ps_x = MyPC.bigRectX + width + MyPC.spacing * 2;
        int ps_y = MyPC.bigRectY + MyPC.spacing;

        graphics.setColor(new Color(204, 255, 204));
        graphics.fillRect(ps_x, ps_y, width, height);
        graphics.setColor(Color.black);
        graphics.drawRect(ps_x, ps_y, width, height);

        MyPC.setTextStyle(Font.BOLD, 18, graphics);
        graphics.drawString("Power Supply: ", ps_x + 5, ps_y + MyPC.textSize);
        MyPC.setTextStyle(Font.BOLD, 15, graphics);
        graphics.drawString("Corsair RM750x", ps_x + 5, ps_y + MyPC.textSize * 2);
        MyPC.setTextStyle(Font.PLAIN, 15, graphics);
        graphics.drawString("Cost: " + "200", ps_x + 5, ps_y + height - MyPC.textSize);
      }
    }
  };

  public String convertInt(String finalR) {
    char[] rArray = finalR.toCharArray();
    String temp = "";
    for (int i = 0; i < rArray.length; i++) {
      if (rArray[i] != '.') {
        temp += String.valueOf(rArray[i]);
      } else {
        break;
      }
    }
    return temp;
  }

  public void initialize() {
    this.setTitle("PC Builder Version 1.0");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(panel);
    panel.setPreferredSize(new Dimension(size, size));
    this.pack();
    this.setVisible(1 == 1);
    this.setResizable(false);
  }

  public static void setTextStyle(int style, int size, Graphics graphics) {
    graphics.setFont(new Font("Arial", style, size));
  }
  public static void main(String[] args) {
    MyPC thePC = new MyPC();
    thePC.initialize();
  }

}
